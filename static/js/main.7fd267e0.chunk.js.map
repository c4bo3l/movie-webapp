{"version":3,"sources":["components/MainTitle/MainTitle.tsx","shared/constants.ts","shared/links.ts","components/Movie/Movie.tsx","components/MovieContainer/MovieContainer.tsx","hooks/useOMDb.ts","recoil/moviePageState.ts","components/Movies/Movies.tsx","hooks/useMoviePageState.ts","components/DetailTitle/DetailTitle.tsx","components/MovieDetail/MovieDetail.tsx","pages/MainPage/MainPage.tsx","pages/DetailPage/DetailPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MainTitle","Navbar","bg","variant","expand","sticky","Container","fluid","Brand","BASE_API_URL","BASE_WEB_URL","process","NO_AVAILABLE_IMAGE_URL","DETAIL_LINK","Movie","props","history","useHistory","imgSrc","Poster","toLowerCase","Card","style","width","cursor","onClick","push","imdbID","Img","src","height","alt","Title","Body","Subtitle","Year","MovieContainer","children","rest","Col","xs","md","lg","display","justifyContent","useOMDb","fetchMovies","search","page","a","axios","get","response","data","fetchMovieDetail","imdbId","moviePageState","atom","key","default","undefined","Movies","useState","setPage","movies","setMovies","useRecoilState","useMoviePageState","mainPageState","setMainPageState","error","setError","hasMoreData","setHasMoreData","useEffect","then","result","Error","Response","Search","Row","className","position","top","zIndex","InputGroup","Text","id","FormControl","placeholder","aria-label","aria-describedby","onChange","event","window","scrollTo","currentTarget","value","dataLength","length","next","hasMore","loader","overflowX","Alert","map","movie","index","DetailTitle","href","goBack","alignItems","MovieDetail","detail","setDetail","isLoading","setIsLoading","imdbid","catch","reason","console","finally","ratingRowSpan","Ratings","Spinner","animation","Table","responsive","colSpan","Rated","Released","Runtime","Genre","Director","Writer","Actors","Plot","Language","Country","Awards","rowSpan","rating","Source","Value","Metascore","imdbRating","imdbVotes","DVD","BoxOffice","Production","Website","MainPage","DetailPage","useParams","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fd267e0.chunk.js","sourcesContent":["import { Container, Navbar } from \"react-bootstrap\";\n\nexport const MainTitle = () => {\n  return (\n    <Navbar bg='light' variant='light' expand='lg' sticky='top'>\n      <Container fluid>\n        <Navbar.Brand>\n          Movie Web App\n        </Navbar.Brand>\n      </Container>\n    </Navbar>\n  );\n};","export const BASE_API_URL = 'https://www.omdbapi.com/?apikey=b9bd48a6';\nexport const BASE_WEB_URL = process.env.REACT_APP_HOMEPAGE;\nexport const NO_AVAILABLE_IMAGE_URL = 'https://upload.wikimedia.org/wikipedia/commons/4/47/GarvaGriha_in_KaryaBinayak.jpg';","import { BASE_WEB_URL } from \".\";\n\nexport const MAIN_LINK = BASE_WEB_URL;\nexport const DETAIL_LINK = `${BASE_WEB_URL}/detail`;","import { Card } from \"react-bootstrap\";\nimport { useHistory } from \"react-router\";\nimport { movieModel } from \"../../models\";\nimport { DETAIL_LINK, NO_AVAILABLE_IMAGE_URL } from \"../../shared\";\n\ninterface MovieProps extends movieModel { }\n\nexport const Movie = (props: MovieProps) => {\n  const history = useHistory();\n  const imgSrc = !!!props.Poster || props.Poster.toLowerCase() === 'n/a' ?\n    NO_AVAILABLE_IMAGE_URL :\n    props.Poster;\n\n  const goToDetailPage = () => {\n    history.push(`${DETAIL_LINK}/${props.imdbID}`);\n  };\n\n  return (\n    <Card\n      key={props.imdbID}\n      style={{ \n        width: '18rem',\n        cursor: 'pointer'\n      }}\n      onClick={goToDetailPage}\n    >\n      <Card.Img variant=\"top\" src={imgSrc} height='386' alt={`img-${props.Title}`} />\n      <Card.Body>\n        <Card.Title>\n          {props.Title}\n        </Card.Title>\n        <Card.Subtitle>\n          {props.Year}\n        </Card.Subtitle>\n      </Card.Body>\n    </Card>\n  );\n};\n","import { ReactNode } from \"react\";\nimport { Col, ColProps } from \"react-bootstrap\";\n\ninterface MovieContainerProps extends ColProps {\n  children: ReactNode\n}\nexport const MovieContainer = ({children, ...rest}: MovieContainerProps) => {\n  return (\n    <Col\n      {...rest}\n      xs={12}\n      md={6}\n      lg={3}\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      {children}\n    </Col>\n  );\n};","import axios from 'axios';\nimport { movieDetailModel, movieModel } from '../models';\nimport { BASE_API_URL } from '../shared';\n\ntype movieAPIResult = {\n  Search?: movieModel[];\n  totalResults?: number;\n  Response: boolean;\n  Error?: string;\n};\n\nexport const useOMDb = () => {\n  const fetchMovies = async (search: string, page?: number) => {\n    const response = await axios.get<movieAPIResult>(`${BASE_API_URL}&type=movie&s=${search}&page=${page || 1}`);\n    return response.data;\n  };\n\n  const fetchMovieDetail = async (imdbId: string) => {\n    const response = await axios.get<movieDetailModel>(`${BASE_API_URL}&type=movie&i=${imdbId}`);\n    return response.data;\n  }\n\n  return {\n    fetchMovies,\n    fetchMovieDetail\n  };\n};","import { atom } from \"recoil\";\n\nconst moviePageStateKey = 'movie-page-state';\n\nexport type moviePageStateType = {\n  search?: string\n};\n\nexport const moviePageState = atom<moviePageStateType>({\n  key: moviePageStateKey,\n  default: {\n    search: undefined\n  }\n});","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport { Alert, Col, Container, FormControl, InputGroup, Row } from \"react-bootstrap\";\nimport { Search } from \"react-bootstrap-icons\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Movie, MovieContainer } from \"..\";\nimport { useMoviePageState, useOMDb } from \"../../hooks\";\nimport { movieModel } from \"../../models\";\n\nexport const Movies = () => {\n  const { fetchMovies } = useOMDb();\n  const [page, setPage] = useState(1);\n  const [movies, setMovies] = useState<movieModel[]>([]);\n  const [mainPageState, setMainPageState] = useMoviePageState();\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [hasMoreData, setHasMoreData] = useState(false);\n\n  const onSearchChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    window.scrollTo(0, 0);\n    setMovies([]);\n    setPage(1);\n    setMainPageState({\n      search: event.currentTarget.value\n    });\n  };\n\n  const fetch = () => {\n    setError(undefined);\n\n    if (!!!mainPageState.search) {\n      setMovies([]);\n      return;\n    }\n\n    fetchMovies(mainPageState.search, page)\n      .then((result) => {\n        setError(page !== 1 ? undefined : result.Error);\n        setHasMoreData(result.Response);\n        if (!!result.Search) {\n          setMovies([\n            ...movies,\n            ...result.Search\n          ]);\n        }\n      });\n  };\n\n  const fetchNext = () => {\n    setPage(page + 1);\n  };\n\n  useEffect(() => {\n    fetch();\n  }, [page, mainPageState.search]);\n\n  return (\n    <Container fluid>\n      <Row className='mt-2' style={{\n        position: 'sticky',\n        top: '56px',\n        zIndex: 100\n      }}>\n        <Col>\n          <InputGroup>\n            <InputGroup.Text id=\"txt-search-prefix\">\n              <Search />\n            </InputGroup.Text>\n            <FormControl\n              placeholder=\"Search by movie title\"\n              aria-label=\"Search by movie title\"\n              aria-describedby=\"txt-search-prefix\"\n              onChange={onSearchChanged}\n              value={mainPageState.search || ''}\n            />\n          </InputGroup>\n        </Col>\n      </Row>\n      <InfiniteScroll\n        dataLength={movies.length}\n        next={fetchNext}\n        hasMore={hasMoreData}\n        loader={\n          <div style={{ display: 'hidden' }} />\n        }\n        style={{\n          overflowX: 'hidden'\n        }}\n      >\n        {\n          !!error &&\n          <Row className='mt-2'>\n            <Col>\n              <Alert variant='danger'>\n                {error}\n              </Alert>\n            </Col>\n          </Row>\n        }\n        <Row className='mt-1'>\n          {\n            movies.map((movie, index) => {\n              return (\n                <MovieContainer\n                  key={`${movie.imdbID}-${index}`}\n                  className='mt-2 mb-2'\n                >\n                  <Movie\n                    {...movie}\n                  />\n                </MovieContainer>\n              );\n            })\n          }\n        </Row>\n      </InfiniteScroll>\n    </Container>\n  );\n};","import { useRecoilState } from \"recoil\";\nimport { moviePageState, moviePageStateType } from '../recoil';\n\nexport const useMoviePageState = (): [moviePageStateType, (value: moviePageStateType) => void] => {\n  const [pageState, setPageState] = useRecoilState(moviePageState);\n  return [pageState, setPageState];\n};","import { Container, Navbar } from \"react-bootstrap\";\nimport { ChevronLeft } from 'react-bootstrap-icons';\nimport { useHistory } from \"react-router\";\n\nexport const DetailTitle = () => {\n  const history = useHistory();\n\n  const back = () => {\n    history.goBack();\n  };\n\n  return (\n    <Navbar bg='light' variant='light' expand='lg' sticky='top'>\n      <Container fluid>\n        <Navbar.Brand \n          href='#' \n          onClick={back}\n          style={{\n            display: 'flex',\n            alignItems: 'center'\n          }}\n        >\n          <ChevronLeft /> Back\n        </Navbar.Brand>\n      </Container>\n    </Navbar>\n  );\n};","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport { Alert, Col, Container, Row, Spinner, Table } from \"react-bootstrap\";\nimport { useOMDb } from \"../../hooks\"\nimport { movieDetailModel } from \"../../models\";\nimport { NO_AVAILABLE_IMAGE_URL } from \"../../shared\";\n\ninterface MovieDetailProps {\n  imdbid: string;\n}\n\nexport const MovieDetail = (props: MovieDetailProps) => {\n  const { fetchMovieDetail } = useOMDb();\n  const [detail, setDetail] = useState<movieDetailModel | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetch = () => {\n    setIsLoading(true);\n    fetchMovieDetail(props.imdbid)\n      .then((result) => {\n        setDetail({ ...result });\n      }).catch((reason) => {\n        console.error(reason);\n      }).finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    fetch();\n  }, []);\n\n  const imgSrc = detail?.Poster?.toLowerCase() === 'n/a' ? NO_AVAILABLE_IMAGE_URL : detail?.Poster;\n  const ratingRowSpan = !!detail?.Ratings ? detail.Ratings.length + 1 : 0;\n\n  return (\n    <Container fluid>\n      {\n        !!detail?.Error &&\n        <Row className='mt-2'>\n          <Col>\n            <Alert variant='danger'>\n              {detail.Error}\n            </Alert>\n          </Col>\n        </Row>\n      }\n      {\n        isLoading &&\n        <Row className='mt-2'>\n          <Col style={{\n            display: 'flex',\n            justifyContent: 'center'\n          }}>\n            <Spinner animation='grow' variant='primary' />\n          </Col>\n        </Row>\n      }\n      {\n        !!!isLoading && !!!detail?.Error &&\n        <>\n          <Row className='mt-2'>\n            <Col>\n              <h3>\n                {`${detail?.Title} (${detail?.Year})`}\n              </h3>\n            </Col>\n          </Row>\n          <Row>\n            <Col\n              style={{\n                display: 'flex',\n                justifyContent: 'center'\n              }}\n            >\n              <img src={imgSrc} alt={detail?.Title} />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Table responsive>\n                <tbody>\n                  <tr>\n                    <td>Rated</td>\n                    <td colSpan={2}>{detail?.Rated}</td>\n                  </tr>\n                  <tr>\n                    <td>Released</td>\n                    <td colSpan={2}>{detail?.Released}</td>\n                  </tr>\n                  <tr>\n                    <td>Runtime</td>\n                    <td colSpan={2}>{detail?.Runtime}</td>\n                  </tr>\n                  <tr>\n                    <td>Genre</td>\n                    <td colSpan={2}>{detail?.Genre}</td>\n                  </tr>\n                  <tr>\n                    <td>Director</td>\n                    <td colSpan={2}>{detail?.Director}</td>\n                  </tr>\n                  <tr>\n                    <td>Writer</td>\n                    <td colSpan={2}>{detail?.Writer}</td>\n                  </tr>\n                  <tr>\n                    <td>Actors</td>\n                    <td colSpan={2}>{detail?.Actors}</td>\n                  </tr>\n                  <tr>\n                    <td>Plot</td>\n                    <td colSpan={2}>{detail?.Plot}</td>\n                  </tr>\n                  <tr>\n                    <td>Language</td>\n                    <td colSpan={2}>{detail?.Language}</td>\n                  </tr>\n                  <tr>\n                    <td>Country</td>\n                    <td colSpan={2}>{detail?.Country}</td>\n                  </tr>\n                  <tr>\n                    <td>Awards</td>\n                    <td colSpan={2}>{detail?.Awards}</td>\n                  </tr>\n                  <tr>\n                    <td rowSpan={ratingRowSpan}>Ratings</td>\n                  </tr>\n                  {\n                    detail?.Ratings?.map((rating, index) => (\n                      <tr key={`rating-${index}`}>\n                        <td>{rating.Source}</td>\n                        <td>{rating.Value}</td>\n                      </tr>\n                    ))\n                  }\n                  <tr>\n                    <td>Metascore</td>\n                    <td colSpan={2}>{detail?.Metascore}</td>\n                  </tr>\n                  <tr>\n                    <td>IMDB Rating</td>\n                    <td colSpan={2}>{detail?.imdbRating}</td>\n                  </tr>\n                  <tr>\n                    <td>IMDB Votes</td>\n                    <td colSpan={2}>{detail?.imdbVotes}</td>\n                  </tr>\n                  <tr>\n                    <td>DVD</td>\n                    <td colSpan={2}>{detail?.DVD}</td>\n                  </tr>\n                  <tr>\n                    <td>Box Office</td>\n                    <td colSpan={2}>{detail?.BoxOffice}</td>\n                  </tr>\n                  <tr>\n                    <td>Production</td>\n                    <td colSpan={2}>{detail?.Production}</td>\n                  </tr>\n                  <tr>\n                    <td>Website</td>\n                    <td colSpan={2}>\n                      {\n                        detail?.Website?.toLowerCase() === 'n/a' ? detail.Website :\n                          <a href={detail?.Website}>Click here</a>\n                      }\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Col>\n          </Row>\n        </>\n      }\n    </Container>\n  );\n}","import { MainTitle, Movies } from \"../../components\";\n\nexport const MainPage = () => {\n  return (\n    <>\n      <MainTitle />\n      <Movies />\n    </>\n  );\n};","import { useParams } from \"react-router-dom\";\nimport { DetailTitle, MovieDetail } from \"../../components\";\n\nexport const DetailPage = () => {\n  let { imdbId } = useParams<{ imdbId: string }>();\n\n  return (\n    <>\n      <DetailTitle />\n      <MovieDetail imdbid={imdbId} />\n    </>\n  );\n}","import {\n  BrowserRouter,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { DetailPage, MainPage } from './pages';\nimport { DETAIL_LINK, MAIN_LINK } from './shared';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path={MAIN_LINK} component={MainPage} />\n        <Route exact path={`${DETAIL_LINK}/:imdbId`} component={DetailPage} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}